#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app')
var debug = require('debug')('www:server')
var http = require('http')
const https = require('https')
const fs = require('fs')
var config = require('dotenv').config()

var key = fs.readFileSync('encryption/private.key')
var cert = fs.readFileSync( 'encryption/certificate.crt' )
var ca = fs.readFileSync( 'encryption/ca_bundle.crt' )

/**
 * Get port from environment and store in Express.
 */
var log = console.log;

log('ENVIRONMENT PORT = ', config);

var port = parseInt(process.env.PORT || '80');
var portsecure = 443;
app.set('port', port);
app.set('port_secure', portsecure);

/**
 * Create HTTP server.
 */

var options =
{
  key: key,
  cert: cert,
  // ca: ca
};

/**
 * Listen on provided port, on all network interfaces.
 */
var serverSecure = https.createServer(options, app);
var server = http.createServer(app);

serverSecure.listen(portsecure);
serverSecure.on('error', onErrorSecure);
serverSecure.on('listening', onListeningSecure);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onErrorSecure(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP , s server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log('Listening on simple' + bind);
}
function onListeningSecure() {
  var addr = serverSecure.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on secure' + bind);
}
